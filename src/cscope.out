cscope 15 $HOME/DevHub/panorama/zedboard_panorama_2/OpenPano/src               0000042237
	@main.cc

5 
	#_USE_MATH_DEFINES


	)

6 
	~<cm©h
>

8 
	~"„©uª/exåema.hh
"

9 
	~"„©uª/m©chî.hh
"

10 
	~"„©uª/‹õ¡©i⁄.hh
"

11 
	~"lib/m©.h
"

12 
	~"lib/c⁄fig.hh
"

13 
	~"lib/geomëry.hh
"

14 
	~"lib/img¥oc.hh
"

15 
	~"lib/∂™edøwî.hh
"

16 
	~"lib/pﬁyg⁄.hh
"

17 
	~"lib/timî.hh
"

18 
	~"°ôch/cyl°ôchî.hh
"

19 
	~"°ôch/m©ch_öfo.hh
"

20 
	~"°ôch/°ôchî.hh
"

21 
	~"°ôch/å™sf‹m_e°im©e.hh
"

22 
	~"°ôch/w¨p.hh
"

23 
	~"comm⁄/comm⁄.hh
"

24 
	~<˘ime
>

25 
	~<ˇs£π
>

27 #ifde‡
DISABLE_JPEG


28 
	#IMGFILE
(
x
Ë#x ".≤g"

	)

30 
	#IMGFILE
(
x
Ë#x ".jpg"

	)

33 
usög
 
«me•a˚
 
	g°d
;

34 
usög
 
«me•a˚
 
	g∑no
;

35 
usög
 
«me•a˚
 
	gc⁄fig
;

37 
boﬁ
 
	gTEMPDEBUG
 = 
Ál£
;

39 c⁄° 
	gLABEL_LEN
 = 7;

41 
	$ã°_exåema
(c⁄° * 
‚ame
, 
mode
)

43 autÿ
m©
 = 
	`ªad_img
(
‚ame
);

45 
SˇÀS∑˚
 
	`ss
(
m©
, 
NUM_OCTAVE
, 
NUM_SCALE
);

46 
DOGS∑˚
 
	`dog
(
ss
);

47 
ExåemaDëe˘‹
 
	`ex
(
dog
);

49 
Pœ√Døwî
 
	`∂d
(
m©
);

50 i‡(
mode
 == 0)

52 autÿ
exåema
 = 
ex
.
	`gë_øw_exåema
();

53 
	`PP
(
exåema
.
	`size
());

54 autÿ&
i
 : 
exåema
)

56 
∂d
.
	`¸oss
(
i
, 
LABEL_LEN
 / 2);

59 i‡(
mode
 == 1)

61 autÿ
exåema
 = 
ex
.
	`gë_exåema
();

62 
cout
 << 
exåema
.
	`size
(Ë<< 
ídl
;

63 autÿ&
i
 : 
exåema
)

65 
Co‹
 
c
{()(
i
.
ªÆ_co‹
.
x
 * 
m©
.
	`width
()), ()(i.ªÆ_co‹.
y
 * m©.
	`height
())};

66 
∂d
.
	`¸oss
(
c
, 
LABEL_LEN
 / 2);

69 
	`wrôe_rgb
(
	`IMGFILE
(
exåema
), 
m©
);

70 
	}
}

73 
	$ã°_‹õ¡©i⁄
(c⁄° * 
‚ame
)

75 autÿ
m©
 = 
	`ªad_img
(
‚ame
);

76 
SˇÀS∑˚
 
	`ss
(
m©
, 
NUM_OCTAVE
, 
NUM_SCALE
);

77 
DOGS∑˚
 
	`dog
(
ss
);

78 
ExåemaDëe˘‹
 
	`ex
(
dog
);

79 autÿ
exåema
 = 
ex
.
	`gë_exåema
();

80 
Orõ¡©i⁄Assign
 
	`‹t
(
dog
, 
ss
, 
exåema
);

81 autÿ
‹õ¡ed_keypoöt
 = 
‹t
.
	`w‹k
();

83 
Pœ√Døwî
 
	`∂d
(
m©
);

84 
∂d
.
	`£t_ønd_cﬁ‹
();

86 
cout
 << "FótuªPoöàsize: " << 
‹õ¡ed_keypoöt
.
	`size
(Ë<< 
ídl
;

87 autÿ&
i
 : 
‹õ¡ed_keypoöt
)

88 
∂d
.
	`¨row
(
	`Co‹
(
i
.
ªÆ_co‹
.
x
 * 
m©
.
	`width
(), i.ªÆ_co‹.
y
 * m©.
	`height
()), i.
dú
, 
LABEL_LEN
);

89 
	`wrôe_rgb
(
	`IMGFILE
(
‹õ¡©i⁄
), 
m©
);

90 
	}
}

94 
	$ã°_m©ch
(c⁄° * 
f1
, c⁄° * 
f2
)

96 
li°
<
M©32f
> 
imagñi°
;

97 
M©32f
 
pic1
 = 
	`ªad_img
(
f1
);

98 
M©32f
 
pic2
 = 
	`ªad_img
(
f2
);

99 
imagñi°
.
	`push_back
(
pic1
);

100 
imagñi°
.
	`push_back
(
pic2
);

102 
unique_±r
<
FótuªDëe˘‹
> 
dëe˘‹
;

103 
dëe˘‹
.
	`ª£t
(
√w
 
SIFTDëe˘‹
);

105 
ve˘‹
<
Des¸ùt‹
> 
„©1
 = 
dëe˘‹
->
	`dëe˘_„©uª
(
pic1
);

106 
ve˘‹
<
Des¸ùt‹
> 
„©2
 = 
dëe˘‹
->
	`dëe˘_„©uª
(
pic2
);

107 
	`¥öt_debug
("Fótuª: %lu, %lu\n", 
„©1
.
	`size
(), 
„©2
.size());

109 
M©32f
 
c⁄ˇã«ãd
 = 
	`hc⁄ˇt
(
imagñi°
);

110 
Pœ√Døwî
 
	`∂d
(
c⁄ˇã«ãd
);

112 
FótuªM©chî
 
	`m©ch
(
„©1
, 
„©2
);

113 autÿ
ªt
 = 
m©ch
.
	`m©ch
();

114 
	`¥öt_debug
("M©ch size: %d\n", 
ªt
.
	`size
());

116 autÿ&
x
 : 
ªt
.
d©a
)

118 
∂d
.
	`£t_ønd_cﬁ‹
();

119 
Vec2D
 
co‹1
 = 
„©1
[
x
.
fú°
].
co‹
,

120 
co‹2
 = 
„©2
[
x
.
£c⁄d
].
co‹
;

121 
Co‹
 
ico‹1
 = 
	`Co‹
(
co‹1
.
x
 + 
pic1
.
	`width
()/2, co‹1.
y
 +Öic1.
	`height
()/2);

122 
Co‹
 
ico‹2
 = 
	`Co‹
(
co‹2
.
x
 + 
pic2
.
	`width
()/2 + 
pic1
.width(), co‹2.
y
 +Öic2.
	`height
()/2);

123 
∂d
.
	`cú˛e
(
ico‹1
, 
LABEL_LEN
);

124 
∂d
.
	`cú˛e
(
ico‹2
, 
LABEL_LEN
);

125 
∂d
.
	`löe
(
ico‹1
, 
ico‹2
);

127 
	`wrôe_rgb
(
	`IMGFILE
(
m©ch
), 
c⁄ˇã«ãd
);

128 
	}
}

132 
	$ã°_ölõr
(c⁄° * 
f1
, c⁄° * 
f2
) {

133 
li°
<
M©32f
> 
imagñi°
;

134 
M©32f
 
pic1
 = 
	`ªad_img
(
f1
);

135 
M©32f
 
pic2
 = 
	`ªad_img
(
f2
);

136 
imagñi°
.
	`push_back
(
pic1
);

137 
imagñi°
.
	`push_back
(
pic2
);

139 
unique_±r
<
FótuªDëe˘‹
> 
dëe˘‹
;

140 
dëe˘‹
.
	`ª£t
(
√w
 
SIFTDëe˘‹
);

141 
ve˘‹
<
Des¸ùt‹
> 
„©1
 = 
dëe˘‹
->
	`dëe˘_„©uª
(
pic1
),

142 
„©2
 = 
dëe˘‹
->
	`dëe˘_„©uª
(
pic2
);

143 
ve˘‹
<
Vec2D
> 
kp1
; auto& 
d
 : 
„©1
Ëkp1.
	`em∂a˚_back
(d.
co‹
);

144 
ve˘‹
<
Vec2D
> 
kp2
; auto& 
d
 : 
„©2
Ëkp2.
	`em∂a˚_back
(d.
co‹
);

145 
	`¥öt_debug
("Fótuª: %lu, %lu\n", 
„©1
.
	`size
(), 
„©2
.size());

147 
M©32f
 
c⁄ˇã«ãd
 = 
	`hc⁄ˇt
(
imagñi°
);

148 
Pœ√Døwî
 
	`∂d
(
c⁄ˇã«ãd
);

149 
FótuªM©chî
 
	`m©ch
(
„©1
, 
„©2
);

150 autÿ
ªt
 = 
m©ch
.
	`m©ch
();

151 
	`¥öt_debug
("M©ch size: %d\n", 
ªt
.
	`size
());

153 
Tønsf‹mE°im©i⁄
 
	`e°
(
ªt
,

154 
kp1
,

155 
kp2
,

156 {
pic1
.
	`width
(),Öic1.
	`height
()},

157 {
pic2
.
	`width
(),Öic2.
	`height
()});

158 
M©chInfo
 
öfo
;

159 
e°
.
	`gë_å™sf‹m
(&
öfo
);

160 
	`¥öt_debug
("I∆õ∏size: %lu, c⁄f=%lf\n", 
öfo
.
m©ch
.
	`size
(), info.
c⁄fidí˚
);

162 i‡(
öfo
.
m©ch
.
	`size
() == 0)

167 autÿ&
x
 : 
öfo
.
m©ch
)

169 
∂d
.
	`£t_ønd_cﬁ‹
();

170 
Vec2D
 
co‹1
 = 
x
.
fú°
,

171 
co‹2
 = 
x
.
£c⁄d
;

172 
Co‹
 
ico‹1
 = 
	`Co‹
(
co‹1
.
x
 + 
pic1
.
	`width
()/2, co‹1.
y
 +Öic1.
	`height
()/2);

173 
Co‹
 
ico‹2
 = 
	`Co‹
(
co‹2
.
x
 + 
pic2
.
	`width
()/2, co‹2.
y
 +Öic2.
	`height
()/2);

174 
∂d
.
	`cú˛e
(
ico‹1
, 
LABEL_LEN
);

175 
∂d
.
	`cú˛e
(
ico‹2
 + 
	`Co‹
(
pic1
.
	`width
(), 0), 
LABEL_LEN
);

176 
∂d
.
	`löe
(
ico‹1
, 
ico‹2
 + 
	`Co‹
(
pic1
.
	`width
(), 0));

179 
∂d
.
	`£t_cﬁ‹
(
	`Cﬁ‹
(0,0,0));

180 
Vec2D
 
	`off£t1
(
pic1
.
	`width
()/2,Öic1.
	`height
()/2);

181 
Vec2D
 
	`off£t2
(
pic2
.
	`width
()/2 + 
pic1
.width(),Öic2.
	`height
()/2);

184 
Sh≠e2D
 
sh≠e2
{
pic2
.
	`width
(),Öic2.
	`height
()}, 
sh≠e1
{
pic1
.width(),Öic1.height()};

187 
M©rix
 
	`homo
(3,3);

188 
	`REP
(
i
, 9Ë
homo
.
	`±r
()[i] = 
öfo
.homo[i];

189 
Homogøphy
 
öv
 = 
öfo
.
homo
.
	`övî£
();

190 autÿ
p
 = 
	`ovîœp_ªgi⁄
(
sh≠e1
, 
sh≠e2
, 
homo
, 
öv
);

191 
	`PA
(
p
);

192 auto& 
v
: 
p
Ëv +
off£t1
;

193 
∂d
.
	`pﬁyg⁄
(
p
);

195 
M©rix
 
	`övM
(3, 3);

196 
	`REP
(
i
, 9Ë
övM
.
	`±r
()[i] = 
öv
[i];

197 
p
 = 
	`ovîœp_ªgi⁄
(
sh≠e2
, 
sh≠e1
, 
övM
, 
öfo
.
homo
);

198 
	`PA
(
p
);

199 auto& 
v
: 
p
Ëv +
off£t2
;

200 
∂d
.
	`pﬁyg⁄
(
p
);

202 
	`wrôe_rgb
(
	`IMGFILE
(
ölõr
), 
c⁄ˇã«ãd
);

203 
	}
}

206 
	$ã°_w¨p
(
¨gc
, * 
¨gv
[])

208 
CylödîW¨≥r
 
	`w¨p
(1);

209 
	`REPL
(
i
, 2, 
¨gc
)

211 
M©32f
 
m©
 = 
	`ªad_img
(
¨gv
[
i
]);

212 
w¨p
.
	`w¨p
(
m©
);

213 
	`wrôe_rgb
(("w¨p" + 
	`to_°rög
(
i
Ë+ ".jpg").
	`c_°r
(), 
m©
);

215 
	}
}

218 
	$w‹k
(
¨gc
, * 
¨gv
[])

220 
ve˘‹
<
°rög
> 
imgs
;

221 
	`REPL
(
i
, 1, 
¨gc
Ë
imgs
.
	`em∂a˚_back
(
¨gv
[i]);

222 
M©32f
 
ªs
;

224 i‡(
CYLINDER
)

226 
CylödîStôchî
 
	`p
(
	`move
(
imgs
));

227 
ªs
 = 
p
.
	`buûd
();

231 
Stôchî
 
	`p
(
	`move
(
imgs
));

232 
ªs
 = 
p
.
	`buûd
();

235 i‡(
CROP
)

237 
ﬁdw
 = 
ªs
.
	`width
(), 
ﬁdh
 =Ñes.
	`height
();

238 
ªs
 = 
	`¸›
(res);

239 
	`¥öt_debug
("Cr› from %dx%dÅÿ%dx%d\n", 
ﬁdw
, 
ﬁdh
, 
ªs
.
	`width
(),Ñes.
	`height
());

243 
Gu¨dedTimî
 
	`tm
("Writing image");

244 
	`wrôe_rgb
(
	`IMGFILE
(
out
), 
ªs
);

246 
	}
}

248 
	$öô_c⁄fig
()

250 
	#CFG
(
x
Ëx = 
C⁄fig
.
	`gë
(#x)

	)

251 c⁄° * 
c⁄fig_fûe
 = "config.cfg";

252 
C⁄figP¨£r
 
	`C⁄fig
(
c⁄fig_fûe
);

253 
	`CFG
(
CYLINDER
);

254 
	`CFG
(
TRANS
);

255 
	`CFG
(
ESTIMATE_CAMERA
);

256 i‡((
CYLINDER
Ë+ (
TRANS
Ë+ (
ESTIMATE_CAMERA
) >= 2)

258 
	`îr‹_exô
("You setÅwo many modes...\n");

261 i‡(
CYLINDER
)

263 
	`¥öt_debug
("Run with cylinder mode.\n");

265 i‡(
TRANS
)

267 
	`¥öt_debug
("Run withÅranslation mode.\n");

269 i‡(
ESTIMATE_CAMERA
)

271 
	`¥öt_debug
("Run with cameraÉstimation mode.\n");

275 
	`¥öt_debug
("Run withÇaive mode.\n");

278 
	`CFG
(
ORDERED_INPUT
);

279 i‡(!
ORDERED_INPUT
 && !
ESTIMATE_CAMERA
)

281 
	`îr‹_exô
("Require ORDERED_INPUT underÅhis mode!\n");

284 
	`CFG
(
CROP
);

285 
	`CFG
(
STRAIGHTEN
);

286 
	`CFG
(
FOCAL_LENGTH
);

287 
	`CFG
(
MAX_OUTPUT_SIZE
);

288 
	`CFG
(
LAZY_READ
);

290 
	`CFG
(
SIFT_WORKING_SIZE
);

291 
	`CFG
(
NUM_OCTAVE
);

292 
	`CFG
(
NUM_SCALE
);

293 
	`CFG
(
SCALE_FACTOR
);

294 
	`CFG
(
GAUSS_SIGMA
);

295 
	`CFG
(
GAUSS_WINDOW_FACTOR
);

296 
	`CFG
(
JUDGE_EXTREMA_DIFF_THRES
);

297 
	`CFG
(
CONTRAST_THRES
);

298 
	`CFG
(
PRE_COLOR_THRES
);

299 
	`CFG
(
EDGE_RATIO
);

300 
	`CFG
(
CALC_OFFSET_DEPTH
);

301 
	`CFG
(
OFFSET_THRES
);

302 
	`CFG
(
ORI_RADIUS
);

303 
	`CFG
(
ORI_HIST_SMOOTH_COUNT
);

304 
	`CFG
(
DESC_HIST_SCALE_FACTOR
);

305 
	`CFG
(
DESC_INT_FACTOR
);

306 
	`CFG
(
MATCH_REJECT_NEXT_RATIO
);

307 
	`CFG
(
RANSAC_ITERATIONS
);

308 
	`CFG
(
RANSAC_INLIER_THRES
);

309 
	`CFG
(
INLIER_IN_MATCH_RATIO
);

310 
	`CFG
(
INLIER_IN_POINTS_RATIO
);

311 
	`CFG
(
SLOPE_PLAIN
);

312 
	`CFG
(
LM_LAMBDA
);

313 
	`CFG
(
MULTIPASS_BA
);

314 
	`CFG
(
MULTIBAND
);

315 #unde‡
CFG


316 
	}
}

319 
	$∂™ë
(c⁄° * 
‚ame
)

321 
M©32f
 
ã°
 = 
	`ªad_img
(
‚ame
);

322 
w
 = 
ã°
.
	`width
(), 
h
 =Åe°.
	`height
();

323 c⁄° 
OUTSIZE
 = 1000, 
˚¡î
 = OUTSIZE / 2;

324 
M©32f
 
	`ªt
(
OUTSIZE
, OUTSIZE, 3);

325 
	`fûl
(
ªt
, 
Cﬁ‹
::
NO
);

327 
	`REP
(
i
, 
OUTSIZE
ËREP(
j
, OUTSIZE)

329 
ªÆ_t
 
di°
 = 
	`hypŸ
(
˚¡î
 - 
i
, cíã∏- 
j
);

330 i‡(
di°
 >
˚¡î
 || dist == 0) ;

331 
di°
 = di° / 
˚¡î
;

333 
di°
 = 
h
 - dist * h;

335 
ªÆ_t
 
thëa
;

336 i‡(
j
 =
˚¡î
)

338 i‡(
i
 < 
˚¡î
)

340 
thëa
 = 
M_PI
 / 2;

344 
thëa
 = 3 * 
M_PI
 / 2;

349 
thëa
 = 
	`©™
((
ªÆ_t
)(
˚¡î
 - 
i
Ë/ (˚¡î - 
j
));

350 i‡(
thëa
 < 0Ëthë®+
M_PI
;

351 i‡((
thëa
 =0Ë&& (
j
 > 
˚¡î
)Ëthë®+
M_PI
;

352 i‡(
˚¡î
 < 
i
Ë
thëa
 +
M_PI
;

355 
	`m_as£π
(0 <
thëa
);

356 
	`m_as£π
(2 * 
M_PI
 + 
EPS
 >
thëa
);

358 
thëa
 =Åhë®/ (
M_PI
 * 2Ë* 
w
;

360 
	`upd©e_mö
(
di°
, (
ªÆ_t
)
h
 - 1);

361 
Cﬁ‹
 
c
 = 
	`öãΩﬁ©e
(
ã°
, 
di°
, 
thëa
);

362 * 
p
 = 
ªt
.
	`±r
(
i
, 
j
);

363 
c
.
	`wrôe_to
(
p
);

365 
	`wrôe_rgb
(
	`IMGFILE
(
∂™ë
), 
ªt
);

366 
	}
}

369 
	$maö
(
¨gc
, * 
¨gv
[])

371 i‡(
¨gc
 <= 2)

373 
	`îr‹_exô
("NeedátÜeastÅwo imagesÅo stitch.\n");

376 
TŸÆTimîGlobÆGu¨d
 
_g
;

377 
	`§™d
(
	`time
(
NULL
));

379 
	`öô_c⁄fig
();

381 
°rög
 
comm™d
 = 
¨gv
[1];

382 i‡(
comm™d
 == "raw_extrema")

384 
	`ã°_exåema
(
¨gv
[2], 0);

386 i‡(
comm™d
 == "keypoint")

388 
	`ã°_exåema
(
¨gv
[2], 1);

390 i‡(
comm™d
 == "orientation")

392 
	`ã°_‹õ¡©i⁄
(
¨gv
[2]);

394 i‡(
comm™d
 == "match")

396 
	`ã°_m©ch
(
¨gv
[2],árgv[3]);

398 i‡(
comm™d
 == "inlier")

400 
	`ã°_ölõr
(
¨gv
[2],árgv[3]);

402 i‡(
comm™d
 == "warp")

404 
	`ã°_w¨p
(
¨gc
, 
¨gv
);

406 i‡(
comm™d
 == "planet")

408 
	`∂™ë
(
¨gv
[2]);

413 
	`w‹k
(
¨gc
, 
¨gv
);

415 
	}
}

	@common/common.hh

1 #ifde‡
MSVC


2 
	#nŸ
 !

	)

	@feature/extrema.hh

5 #¥agm®
⁄˚


6 
	~<ve˘‹
>

7 
	~"dog.hh
"

8 
	~"lib/m©.h
"

9 
	~"lib/geomëry.hh
"

10 
	~"comm⁄/comm⁄.hh
"

11 
«me•a˚
 
	g∑no
 {

13 
	gSSPoöt
;

15 ˛as†
	cExåemaDëe˘‹
 {

16 
	gpublic
:

17 
ex∂icô
 
ExåemaDëe˘‹
(c⁄° 
DOGS∑˚
&);

19 
ExåemaDëe˘‹
(c⁄° ExåemaDëe˘‹&Ë
dñëe
;

20 
	gExåemaDëe˘‹
& 
	g›î©‹
 = (c⁄° 
ExåemaDëe˘‹
&Ë
dñëe
;

22 
	g°d
::
ve˘‹
<
SSPoöt
> 
gë_exåema
() const;

25 
	g°d
::
ve˘‹
<
Co‹
> 
gë_øw_exåema
() const;

27 
	g¥Ÿe˘ed
:

28 c⁄° 
DOGS∑˚
& 
dog
;

31 
	g°d
::
ve˘‹
<
Co‹
> 
gë_loˇl_øw_exåema
(
pyr_id
, 
sˇÀ_id
) const;

36 
boﬁ
 
ˇlc_kp_off£t
(
SSPoöt
* 
•
) const;

38 
	g°d
::
∑ú
<
Vec
, 
	gVec
> 
ˇlc_kp_off£t_ôî
(

39 c⁄° 
DOGS∑˚
::
DOG
& 
now_pyømid
,

40 
√wx
, 
√wy
, 
√ws
) const;

43 
boﬁ
 
is_edge_ª•⁄£
(
Co‹
 
co‹
, c⁄° 
M©32f
& 
img
) const;

	@feature/matcher.hh

5 #¥agm®
⁄˚


6 
	~<ve˘‹
>

7 
	~<Ê™n/Ê™n.hµ
>

8 
	~"„©uª.hh
"

9 
	~"di°.hh
"

10 
	~"comm⁄/comm⁄.hh
"

12 
«me•a˚
 
	g∑no
 {

14 ˛as†
	cM©chD©a
 {

15 
	gpublic
:

17 
°d
::
ve˘‹
<°d::
∑ú
<, >> 
	gd©a
;

19 
size
(Ëc⁄° {  
	gd©a
.size(); }

21 
ªvî£
() {

22 auto& 
	gi
 : 
d©a
)

23 
i
 = 
°d
::
make_∑ú
(i.
£c⁄d
, i.
fú°
);

27 ˛as†
	cFótuªM©chî
 {

28 
	g¥Ÿe˘ed
:

29 c⁄° 
°d
::
ve˘‹
<
Des¸ùt‹
> &
„©1
, &
	g„©2
;

30 
	gpublic
:

31 
FótuªM©chî
(c⁄° 
°d
::
ve˘‹
<
Des¸ùt‹
>& 
f1
, c⁄° std::ve˘‹<Des¸ùt‹>& 
f2
):

32 
„©1
(
f1
), 
„©2
(
f2
) { }

34 
FótuªM©chî
(c⁄° FótuªM©chî&Ë
dñëe
;

35 
	gFótuªM©chî
& 
	g›î©‹
 = (c⁄° 
FótuªM©chî
&Ë
dñëe
;

37 
M©chD©a
 
m©ch
() const;

40 ˛as†
	cPaúWi£M©chî
 {

41 
	gpublic
:

42 
ex∂icô
 
PaúWi£M©chî
(

43 c⁄° 
°d
::
ve˘‹
<°d::ve˘‹<
Des¸ùt‹
>>& 
„©s
)

44 : 
D
(
„©s
.
©
(0).©(0).
des¸ùt‹
.
size
()), feats(feats)

45 { 
buûd
(); }

47 
PaúWi£M©chî
(c⁄° PaúWi£M©chî&Ë
dñëe
;

48 
	gPaúWi£M©chî
& 
	g›î©‹
 = (c⁄° 
PaúWi£M©chî
&Ë
dñëe
;

51 
M©chD©a
 
m©ch
(
i
, 
j
) const;

53 ~
PaúWi£M©chî
() {

54 auto& 
	gp
: 
„©uª_bufs
Ë
dñëe
[] 
p
;

57 
	g¥Ÿe˘ed
:

58 c⁄° 
D
;

59 c⁄° 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
Des¸ùt‹
>> &
„©s
;

61 
	g°d
::
ve˘‹
<
Ê™n
::
Index
<
∑no
::
L2SSE
>> 
åìs
;

64 
	g°d
::
ve˘‹
<*> 
„©uª_bufs
;

66 
buûd
();

	@feature/orientation.hh

5 #¥agm®
⁄˚


6 
	~<ve˘‹
>

7 
	~"dog.hh
"

8 
	~"comm⁄/comm⁄.hh
"

10 
«me•a˚
 
	g∑no
 {

11 
	gSSPoöt
;

13 ˛as†
	cOrõ¡©i⁄Assign
 {

14 
	gpublic
:

15 
Orõ¡©i⁄Assign
(

16 c⁄° 
DOGS∑˚
& 
dog
, c⁄° 
SˇÀS∑˚
& 
ss
,

17 c⁄° 
°d
::
ve˘‹
<
SSPoöt
>& 
keypoöts
);

19 
Orõ¡©i⁄Assign
(c⁄° Orõ¡©i⁄Assign&Ë
dñëe
;

20 
	gOrõ¡©i⁄Assign
& 
	g›î©‹
 = (c⁄° 
Orõ¡©i⁄Assign
&Ë
dñëe
;

23 
	g°d
::
ve˘‹
<
SSPoöt
> 
w‹k
() const;

25 
	g¥Ÿe˘ed
:

26 c⁄° 
DOGS∑˚
& 
dog
;

27 c⁄° 
	gSˇÀS∑˚
& 
	gss
;

28 c⁄° 
	g°d
::
ve˘‹
<
SSPoöt
>& 
poöts
;

30 
	g°d
::
ve˘‹
<> 
ˇlc_dú
(c⁄° 
SSPoöt
& 
p
) const;

	@lib/config.hh

5 #¥agm®
⁄˚


6 
	#_USE_MATH_DEFINES


	)

7 
	~<cm©h
>

9 
	~<m≠
>

10 
	~<c°rög
>

11 
	~<f°ªam
>

13 
«me•a˚
 
	gc⁄fig
 {

15 ˛as†
	cC⁄figP¨£r
 {

16 
	gpublic
:

17 
°d
::
m≠
<°d::
°rög
, > 
	gd©a
;

19 
C⁄figP¨£r
(c⁄° * 
‚ame
);

21 
gë
(c⁄° 
°d
::
°rög
& 
s
);

24 
boﬁ
 
CYLINDER
;

25 
boﬁ
 
TRANS
;

26 
boﬁ
 
CROP
;

27 
FOCAL_LENGTH
;

28 
boﬁ
 
ESTIMATE_CAMERA
;

29 
boﬁ
 
STRAIGHTEN
;

30 
MAX_OUTPUT_SIZE
;

31 
boﬁ
 
ORDERED_INPUT
;

32 
boﬁ
 
LAZY_READ
;

34 
SIFT_WORKING_SIZE
;

35 
NUM_OCTAVE
;

36 
NUM_SCALE
;

37 
SCALE_FACTOR
;

39 
GAUSS_SIGMA
;

40 
GAUSS_WINDOW_FACTOR
;

42 
JUDGE_EXTREMA_DIFF_THRES
;

43 
CONTRAST_THRES
;

44 
PRE_COLOR_THRES
;

45 
EDGE_RATIO
;

47 
CALC_OFFSET_DEPTH
;

48 
OFFSET_THRES
;

50 
ORI_RADIUS
;

51 
ORI_HIST_SMOOTH_COUNT
;

53 
DESC_HIST_SCALE_FACTOR
;

54 
DESC_INT_FACTOR
;

56 
MATCH_REJECT_NEXT_RATIO
;

58 
RANSAC_ITERATIONS
;

59 
RANSAC_INLIER_THRES
;

60 
INLIER_IN_MATCH_RATIO
;

61 
INLIER_IN_POINTS_RATIO
;

63 
SLOPE_PLAIN
;

65 
MULTIPASS_BA
;

66 
LM_LAMBDA
;

68 
MULTIBAND
;

73 c⁄° 
	gORI_WINDOW_FACTOR
 = 1.5f;

74 c⁄° 
	gORI_HIST_BIN_NUM
 = 36;

75 c⁄° 
	gORI_HIST_PEAK_RATIO
 = 0.8f;

77 c⁄° 
	gDESC_HIST_WIDTH
 = 4;

78 c⁄° 
	gDESC_HIST_BIN_NUM
 = 8;

79 c⁄° 
	gDESC_LEN
 = 128;

80 c⁄° 
	gDESC_NORM_THRESH
 = 0.2f;

82 c⁄° 
	gBRIEF_PATH_SIZE
 = 9;

83 c⁄° 
	gBRIEF_NR_PAIR
 = 256;

85 c⁄° 
	gFLANN_NR_KDTREE
 = 6;

	@lib/geometry.hh

5 #¥agm®
⁄˚


7 
	~<ve˘‹
>

8 
	~<limôs
>

9 
	~<Æg‹ôhm
>

10 
	~<cm©h
>

11 
	~"utûs.hh
"

12 
	~"debugutûs.hh
"

15 ˛as†
	cGeomëry
 {

16 
	mpublic
:

17 
w
, 
	mh
;

19 
	$Geomëry
(
m_w
 = 0, 
m_h
 = 0):

20 
	`w
(
m_w
), 
	$h
(
m_h
) {}

22 
	$¨ó
() const

23 {  
w
 * 
h
; 
	}
}

25 
ªÆ_t
 
	$øtio
() const

26 {  (
ªÆ_t
Ë
°d
::
	`max
(
w
, 
h
Ë/ std::
	`mö
(w, h); 
	}
}

28 
boﬁ
 
	$c⁄èö
(
x
, 
y
)

29 {  (
x
 >0 && x < 
w
 && 
y
 >0 && y < 
h
); 
	}
}

32 
	gãm∂©e
<
ty≥«me
 
	gT
>

33 ˛as†
	cVe˘‹
 {

34 
	mpublic
:

35 
T
 
x
 = 0, 
	my
 = 0, 
	mz
 = 0;

37 
c⁄°ex¥
 
ex∂icô
 
	$Ve˘‹
(
T
 
m_x
 = 0, T 
m_y
 = 0, T 
m_z
 = 0):

38 
	`x
(
m_x
), 
	`y
(
m_y
), 
	$z
(
m_z
) {}

40 
	$Ve˘‹
(c⁄° 
Ve˘‹
 &
p0
, c⁄° Ve˘‹ &
p1
):

41 
	`x
(
p1
.
x
 - 
p0
.x), 
	`y
’1.
y
 -p0.y), 
	`z
’1.
z
 -Ö0.zË{
	}
}

43 
ex∂icô
 
	$Ve˘‹
(c⁄° 
T
* 
p
):

44 
	`x
(
p
[0]), 
	`y
’[1]), 
	$z
(
p
[2]Ë{
	}
}

46 
T
 
	$ödex
(
c
) const

47 {  
c
 =0 ? 
x
 : c =1 ? 
y
 : 
z
; 
	}
}

49 
	gT
& 
	$ödex
(
c
)

50 {  
c
 =0 ? 
x
 : c =1 ? 
y
 : 
z
; 
	}
}

52 
T
 
	$mö_comp_abs
() const {

53 
T
 
a
 = 
	`Ábs
(
x
), 
b
 = fabs(
y
), 
c
 = fabs(
z
);

54 ::
	`upd©e_mö
(
a
, 
b
), ::upd©e_mö◊, 
c
);

55  
a
;

56 
	}
}

58 
T
 
	$sqr
() const

59 {  
x
 * x + 
y
 * y + 
z
 * z; 
	}
}

61 
T
 
	$mod
() const

62 {  
	`sqπ
(
	`sqr
()); 
	}
}

64 
T
 
	$dŸ
(c⁄° 
Ve˘‹
 &
v
) const

65 {  
x
 * 
v
.x + 
y
 * v.y + 
z
 * v.z; 
	}
}

67 
Ve˘‹
 
	$¸oss
(c⁄° 
Ve˘‹
 &
v
) const

68 {  
	`Ve˘‹
(
y
 * 
v
.
z
 - z * v.y, z * v.
x
 - x * v.z, x * v.y - y * v.x); 
	}
}

70 
	gVe˘‹
& 
	g›î©‹
 = (c⁄° 
Ve˘‹
& 
v
)

71 { 
x
 = 
v
.x, 
	gy
 = v.
y
, 
	gz
 = v.
z
;  *
	gthis
; }

73 
	$n‹mÆize
() {

74 
T
 
m
 = 1 / 
	`mod
();

75 *
this
 *
m
;

76 
	`m_as£π
(
°d
::
	`i¢‹mÆ
(
m
));

77 
	}
}

79 
Ve˘‹
 
	$gë_n‹mÆized
() const

80 { 
Ve˘‹
 
	`ªt
(*
this
); 
ªt
.
	`n‹mÆize
(); Ñë; 
	}
}

82 
boﬁ
 
	$is_zîo
(
T
 
thªshﬁd
 = 
EPS
) const

83 {  
	`Ábs
(
x
Ë< 
thªshﬁd
 && fabs(
y
Ë<Åhªshﬁd && fabs(
z
Ë<Åhªshﬁd; 
	}
}

85 
boﬁ
 
	$is_posôive
(
T
 
thªshﬁd
 = 
EPS
) const

86 {  
x
 > 
thªshﬁd
 && 
y
 >Åhªshﬁd && 
z
 >Åhªshﬁd; 
	}
}

88 
	$upd©e_mö
(c⁄° 
Ve˘‹
 &
v
)

89 { ::
	`upd©e_mö
(
x
, 
v
.x); ::upd©e_mö(
y
, v.y); ::upd©e_mö(
z
, v.z); 
	}
}

91 
	$upd©e_max
(c⁄° 
Ve˘‹
 &
v
)

92 { ::
	`upd©e_max
(
x
, 
v
.x); ::upd©e_max(
y
, v.y); ::upd©e_max(
z
, v.z); 
	}
}

94 
Ve˘‹
 
	g›î©‹
 + (c⁄° 
	gVe˘‹
 &
	gv
) const

95 {  
Ve˘‹
(
x
 + 
v
.x, 
y
 + v.y, 
z
 + v.z); }

97 
	gVe˘‹
& 
	g›î©‹
 +(c⁄° 
Ve˘‹
 &
v
)

98 { 
x
 +
v
.x; 
	gy
 +v.
y
; 
	gz
 +v.
z
;  *
	gthis
; }

100 
Ve˘‹
 
	g›î©‹
 - (c⁄° 
	gVe˘‹
 &
	gv
) const

101 {  
Ve˘‹
(
x
 - 
v
.x, 
y
 - v.y, 
z
 - v.z); }

103 
Ve˘‹
 
	g›î©‹
 - () const

104 {  
Ve˘‹
(-
x
, -
y
, -
z
); }

106 
	gVe˘‹
& 
	g›î©‹
 -(c⁄° 
Ve˘‹
 &
v
)

107 { 
x
 -
v
.x; 
	gy
 -v.
y
; 
	gz
 -v.
z
;  *
	gthis
; }

109 
Ve˘‹
 
	g›î©‹
 * (
T
 
	gp
) const

110 {  
Ve˘‹
(
x
 * 
p
, 
y
 *Ö, 
z
 *Ö); }

112 
	gVe˘‹
& 
	g›î©‹
 *(
T
 
p
)

113 { 
x
 *
p
; 
	gy
 *p; 
	gz
 *p;  *
	gthis
; }

115 
Ve˘‹
 
	g›î©‹
 / (
T
 
	gp
) const

116 {  *
	gthis
 * (1.0 / 
	gp
); }

118 
	gVe˘‹
& 
	g›î©‹
 /(
T
 
p
)

119 { 
x
 /
p
; 
	gy
 /p; 
	gz
 /p;  *
	gthis
; }

121 
boﬁ
 
	g›î©‹
 =(c⁄° 
Ve˘‹
 &
v
) const

122 {  
Ábs
(
x
 - 
v
.xË< 
EPS
 && fabs(
y
 - v.yË< EPS && fabs(
z
 - v.z) < EPS; }

124 
boﬁ
 
	g›î©‹
 !(c⁄° 
Ve˘‹
 &
v
) const

125 {  
Ábs
(
x
 - 
v
.xË>
EPS
 || fabs(
y
 - v.yË>EPS || fabs(
z
 - v.z) >= EPS; }

127 
‰õnd
 
	g°d
::
o°ªam
 & 
›î©‹
 << (
°d
::o°ªam &
os
, c⁄° 
	gVe˘‹
& 
	gvec
)

128 {  
	gos
 << 
	gvec
.
	gx
 << " " << vec.
	gy
 << " " << vec.
	gz
;}

130 
Ve˘‹
 
	$max
()

131 {  
	`Ve˘‹
(
°d
::
numîic_limôs
<
T
>::
	`max
(), std::numîic_limôs<T>::max()); 
	}
}

133 
Ve˘‹
 
	$öföôy
()

134 {  
	`Ve˘‹
(
°d
::
numîic_limôs
<
T
>::
	`öföôy
(), std::numîic_limôs<T>::öföôy()); 
	}
}

136 
T
 
	$gë_max
() const

137 {  
°d
::
	`max
(
x
, std::max(
y
, 
z
)); 
	}
}

139 
T
 
	$gë_mö
() const

140 {  
°d
::
	`mö
(
x
, std::mö(
y
, 
z
)); 
	}
}

142 
T
 
	$gë_abs_max
()

143 {  
°d
::
	`max
(
	`Ábs
(
x
), std::max(Ábs(
y
), fabs(
z
))); 
	}
}

145 
	$wrôe_to
(
T
* 
p
) const

146 { 
p
[0] = 
x
,Ö[1] = 
y
,Ö[2] = 
z
; 
	}
}

148 
Ve˘‹
 
	$gë_zîo
()

149 {  
	`Ve˘‹
(0, 0, 0); 
	}
}

152 
Ve˘‹
 
	$ªÊe˘i⁄
(c⁄° 
Ve˘‹
& 
v
) const {

153 
	`m_as£π
(
	`Ábs
(
v
.
	`sqr
(Ë- 1Ë< 
EPS
 && (sqr() - 1 < EPS));

154  *
this
 * 2 * 
	`dŸ
(
v
) - v;

155 
	}
}

159 
	gãm∂©e
<
ty≥«me
 
	gT
>

160 ˛as†
	cVe˘‹2D
 {

161 
	mpublic
:

162 
T
 
x
 = 0, 
	my
 = 0;

164 
	mVe˘‹2D
<
	mT
>(){};

166 
ex∂icô
 
	gVe˘‹2D
<
	gT
>(
T
 
	gm_x
, T 
	gm_y
):

167 
x
(
m_x
), 
	$y
(
m_y
Ë{
	}
}

169 
	gVe˘‹2D
<
	gT
> (c⁄° Ve˘‹2D<T> &
	gp0
, c⁄° Ve˘‹2D<T> &
	gp1
):

170 
x
(
p1
.x - 
p0
.x), 
y
(p1.y -p0.y) {}

172 
T
 
dŸ
(c⁄° 
Ve˘‹2D
<T> &
v
) const

173 {  
x
 * 
	gv
.
	gx
 + 
y
 * v.
	gy
; }

175 
T
 
¸oss
(c⁄° 
Ve˘‹2D
<T> &
v
) const

176 {  
x
 * 
	gv
.
	gy
 - 
y
 * v.
	gx
; }

178 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 + (c⁄° Ve˘‹2D<T> &
	gv
) const

179 {  
	gVe˘‹2D
<
	gT
>(
	gx
 + 
	gv
.x, 
	gy
 + v.y); }

181 
	gVe˘‹2D
<
	gT
>& 
	g›î©‹
 +(c⁄° 
Ve˘‹2D
<
T
> &
v
)

182 { 
x
 +
v
.x; 
	gy
 +v.
y
;  *
	gthis
; }

184 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 - (c⁄° Ve˘‹2D<T> &
	gv
) const

185 {  
	gVe˘‹2D
<
	gT
>(
	gx
 - 
	gv
.x, 
	gy
 - v.y); }

187 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 - () const

188 {  
	gVe˘‹2D
<
	gT
>(-
	gx
, -
	gy
); }

190 
	gVe˘‹2D
<
	gT
>& 
	g›î©‹
 -(c⁄° 
Ve˘‹2D
<
T
> &
v
)

191 { 
x
 -
v
.x; 
	gy
 -v.
y
;  *
	gthis
; }

193 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 * (
T
 
	gf
) const

194 {  
	gVe˘‹2D
<
	gT
>(
x
 * 
	gf
, 
y
 * f); }

196 
	gVe˘‹2D
<
	gT
>& 
	g›î©‹
 *(
T
 
p
)

197 { 
x
 *
p
; 
	gy
 *p;  *
	gthis
; }

199 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 / (
T
 
	gf
) const

200 {  *
	gthis
 * (1.0 / 
	gf
); }

202 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 * (c⁄° Ve˘‹2D<T>& 
	gv
) const

203 {  
	gVe˘‹2D
<
	gT
>(
x
 * 
	gv
.
	gx
, 
y
 * v.
	gy
); }

205 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 / (c⁄° Ve˘‹2D<T>& 
	gv
) const

206 {  
	gVe˘‹2D
<
	gT
>(
	gx
 / 
	gv
.x, 
	gy
 / v.y); }

208 
boﬁ
 
	g›î©‹
 =(c⁄° 
Ve˘‹2D
<
T
> &
v
) const

209 {  
Ábs
(
x
 - 
v
.xË< 
EPS
 && fabs(
y
 - v.y) < EPS; }

212 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 ! () const

213 {  
	gVe˘‹2D
<
	gT
>(
	gx
, -
	gy
); }

216 
	gVe˘‹2D
<
	gT
> 
	g›î©‹
 ~ () const

217 {  
	gVe˘‹2D
<
	gT
>(
	gy
, 
	gx
); }

219 
boﬁ
 
	$is_zîo
() const

220 {  
	`Ábs
(
x
Ë< 
EPS
 && fabs(
y
Ë< EPS; 
	}
}

222 
T
 
	$sqr
() const

223 {  
x
 * x + 
y
 * y; 
	}
}

225 
T
 
	$mod
() const

226 {  
	`hypŸ
(
x
, 
y
); 
	}
}

228 
	gVe˘‹2D
<
	gT
> 
	$gë_n‹mÆized
() const {

229 
T
 
m
 = 
	`mod
();

230 
	`m_as£π
(
m
 > 
EPS
);

231 
m
 = 1.0 / m;

232  
Ve˘‹2D
<
T
>(
x
 * 
m
, 
y
 * m);

233 
	}
}

235 
	$n‹mÆize
() {

236 
T
 
m
 = (T)1.0 / 
	`mod
();

237 
x
 *
m
, 
y
 *= m;

238 
	`m_as£π
(
°d
::
	`i¢‹mÆ
(
m
));

239 
	}
}

241 
	gãm∂©e
 <
ty≥«me
 
	gTT
>

242 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
os
, c⁄° 
	gVe˘‹2D
<
	gTT
>& 
	gv
);

244 
upd©e_mö
(c⁄° 
Ve˘‹2D
<
T
> &
v
)

245 { ::
upd©e_mö
(
x
, 
v
.x); ::upd©e_mö(
y
, v.y);}

247 
upd©e_max
(c⁄° 
Ve˘‹2D
<
T
> &
v
)

248 { ::
upd©e_max
(
x
, 
v
.x); ::upd©e_max(
y
, v.y);}

250 
boﬁ
 
	$isNaN
(Ëc⁄° {  
°d
::
	`i¢™
(
x
); 
	}
}

252 
	gVe˘‹2D
<
	gT
> 
	$NaN
(Ë{  
Ve˘‹2D
<
T
>(
NAN
, NAN); 
	}
}

254 
	gVe˘‹2D
<
	gT
> 
	$max
()

255 {  
Ve˘‹2D
<
T
>(

256 
°d
::
numîic_limôs
<
T
>::
	`max
(),

257 
°d
::
numîic_limôs
<
T
>::
	`max
()); 
	}
}

260 
	gãm∂©e
<
ty≥«me
 
	gT
>

261 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
os
, c⁄° 
	gVe˘‹2D
<
	gT
>& 
	gv
) {

262 
	gos
 << 
	gv
.
	gx
 << ' ' << v.
	gy
;

263  
	gos
;

267 
	gVe˘‹
<> 
	tVec
;

268 
	gVe˘‹2D
<> 
	tCo‹
;

269 
	gVe˘‹2D
<> 
	tVec2D
;

	@lib/imgproc.hh

5 #¥agm®
⁄˚


6 
	~<li°
>

7 
	~"m©.h
"

8 
	~"cﬁ‹.hh
"

10 
˛ass
 
	gM©rix
;

12 
«me•a˚
 
	g∑no
 {

13 
M©32f
 
ªad_img
(c⁄° * 
‚ame
);

14 
M©uc
 
ªad_img_uc
(c⁄° * 
‚ame
);

15 
wrôe_rgb
(c⁄° * 
‚ame
, c⁄° 
M©32f
& 
m©
);

16 
ölöe
 
wrôe_rgb
(c⁄° 
°d
::
°rög
 
s
, c⁄° 
M©32f
& 
m©
Ë{ wrôe_rgb(s.
c_°r
(), mat); }

18 
M©32f
 
hc⁄ˇt
(c⁄° 
°d
::
li°
<M©32f>& 
m©s
);

19 
M©32f
 
vc⁄ˇt
(c⁄° 
°d
::
li°
<M©32f>& 
m©s
);

22 
Cﬁ‹
 
öãΩﬁ©e
(c⁄° 
M©32f
& 
m©
, 
r
, 
c
);

26 
Cﬁ‹
 
öãΩﬁ©e
(c⁄° 
M©uc
& 
m©
, 
r
, 
c
);

28 
M©32f
 
¸›
(c⁄° M©32f& 
m©
);

30 
M©32f
 
rgb2gªy
(c⁄° M©32f& 
m©
);

33 
M©rix
 
gëPî•e˘iveTønsf‹m
(c⁄° 
°d
::
ve˘‹
<
Vec2D
>& 
p1
, c⁄° std::ve˘‹<Vec2D>& 
p2
);

34 
M©rix
 
gëAfföeTønsf‹m
(c⁄° 
°d
::
ve˘‹
<
Vec2D
>& 
p1
, c⁄° std::ve˘‹<Vec2D>& 
p2
);

36 
fûl
(
M©32f
& 
m©
, c⁄° 
Cﬁ‹
& 
c
);

37 
fûl
(
M©32f
& 
m©
, 
c
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
>

40 
ªsize
(c⁄° 
M©
<
T
> &
§c
, M©<T> &
d°
);

42 
M©uc
 
cvt_f2uc
(c⁄° 
M©32f
& 
m©
);

	@lib/mat.h

1 #¥agm®
⁄˚


3 
	~<mem‹y
>

4 
	~<c°rög
>

5 
	~"lib/debugutûs.hh
"

7 
	gãm∂©e
 <
ty≥«me
 
	gT
>

8 ˛as†
	cM©
 {

9 
	mpublic
:

10 
	$M©
(){}

11 
	$M©
(
rows
, 
cﬁs
, 
ch™√ls
):

12 
	`m_rows
(
rows
), 
	`m_cﬁs
(
cﬁs
), 
	`m_ch™√ls
(
ch™√ls
),

13 
m_d©a
{
√w
 
T
[
rows
 * 
cﬁs
 * 
ch™√ls
], 
°d
::
deÁu…_dñëe
<T[]>(Ë
	}
}

16 
vútuÆ
 ~
	$M©
(){
	}
}

18 
T
 &
	$©
(
r
, 
c
, 
ch
 = 0) {

19 
	`m_as£π
(
r
 < 
m_rows
);

20 
	`m_as£π
(
c
 < 
m_cﬁs
);

21 
	`m_as£π
(
ch
 < 
m_ch™√ls
);

22  
	`±r
(
r
)[
c
 * 
m_ch™√ls
 + 
ch
];

23 
	}
}

25 c⁄° 
	gT
 &
	$©
(
r
, 
c
, 
ch
 = 0) const {

26 
	`m_as£π
(
r
 < 
m_rows
);

27 
	`m_as£π
(
c
 < 
m_cﬁs
);

28 
	`m_as£π
(
ch
 < 
m_ch™√ls
);

29  
	`±r
(
r
)[
c
 * 
m_ch™√ls
 + 
ch
];

30 
	}
}

32 
	gM©
<
	gT
> 
	$˛⁄e
() const {

33 
M©
<
T
> 
	`ªs
(
m_rows
, 
m_cﬁs
, 
m_ch™√ls
);

34 
	`mem˝y
(
ªs
.
	`±r
(0), 
this
->±r(0), (
T
Ë* 
m_rows
 * 
m_cﬁs
 * 
m_ch™√ls
);

35  
ªs
;

36 
	}
}

38 c⁄° 
T
 *
	$±r
(
r
 = 0) const

39 {  
m_d©a
.
	`gë
(Ë+ 
r
 * 
m_cﬁs
 * 
m_ch™√ls
; 
	}
}

40 
T
 *
	$±r
(
r
 = 0)

41 {  
m_d©a
.
	`gë
(Ë+ 
r
 * 
m_cﬁs
 * 
m_ch™√ls
; 
	}
}

42 c⁄° 
T
 *
	$±r
(
r
, 
c
) const

43 {  
m_d©a
.
	`gë
(Ë+ (
r
 * 
m_cﬁs
 + 
c
Ë* 
m_ch™√ls
; 
	}
}

44 
T
 *
	$±r
(
r
, 
c
)

45 {  
m_d©a
.
	`gë
(Ë+ (
r
 * 
m_cﬁs
 + 
c
Ë* 
m_ch™√ls
; 
	}
}

46 
	$height
(Ëc⁄° {  
m_rows
; 
	}
}

47 
	$width
(Ëc⁄° {  
m_cﬁs
; 
	}
}

48 
	$rows
(Ëc⁄° {  
m_rows
; 
	}
}

49 
	$cﬁs
(Ëc⁄° {  
m_cﬁs
; 
	}
}

50 
	$ch™√ls
(Ëc⁄° {  
m_ch™√ls
; 
	}
}

51 
	$pixñs
(Ëc⁄° {  
m_rows
 * 
m_cﬁs
; 
	}
}

53 
	g¥Ÿe˘ed
:

54 
m_rows
, 
	gm_cﬁs
;

55 
	gm_ch™√ls
;

56 
	g°d
::
sh¨ed_±r
<
T
> 
m_d©a
;

59 
usög
 
	gM©32f
 = 
M©
<>;

60 
usög
 
	gM©uc
 = 
M©
<>;

	@lib/planedrawer.hh

5 #¥agm®
⁄˚


6 
	~"cﬁ‹.hh
"

7 
	~"m©.h
"

8 
	~"pﬁyg⁄.hh
"

10 
«me•a˚
 
	g∑no
 {

12 
	g°d
::
	t∑ú
<
	tCo‹
, Co‹> 
	tLöe2D
;

14 ˛as†
	cPœ√Døwî
 {

15 
	gpublic
:

17 
ex∂icô
 
Pœ√Døwî
(
M©32f
 
m©
):

18 
m©
(mat) {

19 
m_as£π
(
m©
.
ch™√ls
() == 3);

22 
	gvútuÆ
 ~
Pœ√Døwî
(){}

24 
£t_cﬁ‹
(
Cﬁ‹
 
m_c
Ë{ 
	gc
 = m_c; }

26 
£t_ønd_cﬁ‹
() {

27 autÿ
	ggí_ønd
 = [](Ë{  (
ªÆ_t
)
ønd
(Ë/ 
RAND_MAX
; };

28 
£t_cﬁ‹
(
Cﬁ‹
(
gí_ønd
(), gen_rand(), gen_rand()));

31 
poöt
(
x
, 
y
) {

33 i‡(!
bëwìn
(
x
, 0, 
m©
.
width
()) ||

34 !
bëwìn
(
y
, 0, 
m©
.
height
()))

36 * 
	gp
 = 
m©
.
±r
(
y
, 
x
);

37 
	gc
.
wrôe_to
(
p
);

39 
poöt
(
Co‹
 
v
Ë{Öoöt(v.
x
, v.
y
); }

41 
löe
(
Co‹
 
s
, Co‹ 
t
Ë{ 
Bª£nham
(s,Å); }

42 
löe
(
Vec2D
 
s
, Vec2D 
t
Ë{Üöe(
Co‹
(s.
x
, s.
y
), Coor(t.x,Å.y)); }

43 
löe
(
Löe2D
 
l
Ë{Üöe÷.
fú°
,Ü.
£c⁄d
); }

44 
löe
(
°d
::
∑ú
<
Vec2D
, Vec2D> 
l
Ë{Üöe÷.
fú°
,Ü.
£c⁄d
); }

46 
cú˛e
(
Co‹
 
o
, 
r
);

48 
cú˛e
(
Vec2D
 
o
, 
r
Ë{ cú˛e(
Co‹
(o.
x
, o.
y
),Ñ); }

50 
¸oss
(
Co‹
 
o
, 
r
);

51 
¸oss
(
Vec2D
 
o
, 
r
Ë{ cross(
Co‹
(o.
x
, o.
y
),Ñ); }

53 
¨row
(
Co‹
 
o
, 
ªÆ_t
 
dú
, 
r
);

55 
pﬁyg⁄
(c⁄° 
°d
::
ve˘‹
<
Co‹
>& 
p
) {

56 
i
 = 0; 
	gi
 < 
	gp
.
size
() - 1; i++)

57 
löe
(
p
[
i
],Ö[i + 1]);

58 
löe
(
p
.
back
(),Ö.
‰⁄t
());

60 
pﬁyg⁄
(
°d
::
ve˘‹
<
Vec2D
> 
p
Ë{Öﬁyg⁄(
vecf_to_pﬁyg⁄
(p)); }

62 
	g¥Ÿe˘ed
:

63 
Bª£nham
(
Co‹
 
s
, Co‹ 
t
);

64 
M©32f
 
	gm©
;

65 
Cﬁ‹
 
	gc
 = Cﬁ‹::
BLACK
;

68 
	g°d
::
ve˘‹
<
Co‹
> 
vecf_to_pﬁyg⁄
(
°d
::ve˘‹<
Vec2D
> 
p
) {

69 
°d
::
ve˘‹
<
Co‹
> 
ªt
;

70 autÿ
	gv
 : 
p
)

71 
ªt
.
push_back
(
Co‹
(
v
.
x
, v.
y
));

72  
	gªt
;

	@lib/polygon.hh

4 #¥agm®
⁄˚


5 
	~<ve˘‹
>

6 
	~<utûôy
>

7 
	~"geomëry.hh
"

9 
	g«me•a˚
 {

10 
ölöe
 
Vec2D
 
gë_com
(c⁄° 
°d
::
ve˘‹
<Vec2D>& 
pﬁy
) {

11 
Vec2D
 
ªt
;

12 auto& 
	gc
 : 
pﬁy
)

13 
ªt
 +
c
;

14 
	gªt
 = 
ªt
 * (1.0 / 
pﬁy
.
size
());

15  
	gªt
;

19 
«me•a˚
 
	g∑no
 {

21 
	g°d
::
	tve˘‹
<
	tVec2D
> 
	tPﬁyg⁄
;

25 
Pﬁyg⁄
 
c⁄vex_huŒ
(
°d
::
ve˘‹
<
Vec2D
>&);

27 
pﬁyg⁄_¨ó
(c⁄° 
°d
::
ve˘‹
<
Vec2D
>&);

30 ˛as†
	cPoötInPﬁyg⁄
 {

31 
	gpublic
:

32 
PoötInPﬁyg⁄
(c⁄° 
Pﬁyg⁄
& 
p
): 
pﬁy
(p) {

33 
m_as£π
(
p
.
size
() >= 3);

34 
	gcom
 = 
gë_com
(
pﬁy
);

36 
REP
(
i
, 
p
.
size
()) {

37 
	gk
 = 
©™2
((
p
[
i
].
y
 - 
com
.y), (p[i].
x
 - com.x));

38 
	g¶›es
.
em∂a˚_back
(
k
, 
i
);

40 
s‹t
(
¶›es
.
begö
(), sl›es.
íd
());

43 
boﬁ
 
ö_pﬁyg⁄
(
Vec2D
 
p
) const;

45 
	g¥iv©e
:

46 c⁄° 
Pﬁyg⁄
& 
pﬁy
;

47 
Vec2D
 
	gcom
;

48 
	g°d
::
ve˘‹
<
°d
::
∑ú
<, >> 
	g¶›es
;

	@lib/timer.hh

1 #¥agm®
⁄˚


3 
	~<chr⁄o
>

4 
	~<fun˘i⁄Æ
>

5 
	~<m≠
>

6 
	~<io°ªam
>

7 
	~<°rög
>

9 ˛as†
	cTimî
 {

10 
	mpublic
:

11 
usög
 
Clock
 = 
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
;

12 
	$Timî
() {

13 
	`ª°¨t
();

17 
	$ª°¨t
() {

18 
m_°¨t_time
 = 
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
();

19 
	}
}

22 
	$duøti⁄
() const {

23 autÿ
now
 = 
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
();

24 autÿ
m
 = 
°d
::
chr⁄o
::
duøti⁄_ˇ°
<°d::chr⁄o::
mi¸o£c⁄ds
>(
now
 - 
m_°¨t_time
).
	`cou¡
();

25  
m
 * 1.0 / 1e6;

26 
	}
}

28 
	g¥Ÿe˘ed
:

29 
°d
::
chr⁄o
::
time_poöt
<
Clock
> 
m_°¨t_time
;

34 ˛as†
	cGu¨dedTimî
: 
public
 
Timî
 {

35 
public
:

36 
	$Gu¨dedTimî
(c⁄° 
°d
::
°rög
& 
msg
, 
boﬁ
 
íabÀd
=
åue
):

37 
	`Gu¨dedTimî
([
msg
](
duøti⁄
){

38 
°d
::
cout
 << 
msg
 << ": " << std::
	`to_°rög
(
duøti⁄
 * 1000.Ë<< " mûli£c⁄ds." << std::
ídl
;

40 { 
íabÀd_
 = 
íabÀd
; 
	}
}

42 
	$Gu¨dedTimî
(c⁄° * 
msg
, 
boﬁ
 
íabÀd
=
åue
):

43 
	`Gu¨dedTimî
(
°d
::
	`°rög
(
msg
), 
íabÀd
Ë{
	}
}

45 
Gu¨dedTimî
(
°d
::
fun˘i⁄
<()> 
ˇŒback
):

46 
	$m_ˇŒback
(
ˇŒback
)

47 { 
	}
}

49 ~
	$Gu¨dedTimî
() {

50 i‡(
íabÀd_
)

51 
	`m_ˇŒback
(
	`duøti⁄
());

52 
	}
}

54 
	g¥Ÿe˘ed
:

55 
boﬁ
 
íabÀd_
;

56 
	g°d
::
fun˘i⁄
<()> 
m_ˇŒback
;

62 ˛as†
	cTŸÆTimî
 {

63 
	mpublic
:

64 
	$TŸÆTimî
(c⁄° 
°d
::
°rög
& 
msg
):

65 
	$msg
(
msg
) {

66 
timî
.
	`ª°¨t
();

69 ~
	`TŸÆTimî
();

71 
	`¥öt
();

73 
°d
::
°rög
 
msg
;

74 
Timî
 
timî
;

76 
°d
::
m≠
<°d::
°rög
, std::
∑ú
<, >> 
r°
;

77 
	}
};

80 
	sTŸÆTimîGlobÆGu¨d
 {

81 ~
TŸÆTimîGlobÆGu¨d
(Ë{ 
	mTŸÆTimî
::
¥öt
(); }

85 
	#GUARDED_FUNC_TIMER
 \

86 
Gu¨dedTimî
 
	`_l⁄g_l⁄g_«me_gu¨ded_timî
(
__func__
)

	)

88 
	#TOTAL_FUNC_TIMER
 \

89 
TŸÆTimî
 
	`_l⁄g_l⁄g_«me_tŸÆ_timî
(
__func__
)

	)

	@stitch/cylstitcher.hh

4 #¥agm®
⁄˚


6 
	~"°ôchîba£.hh
"

7 
	~"°ôchî_image.hh
"

8 
	~"comm⁄/comm⁄.hh
"

9 
«me•a˚
 
	g∑no
 {

12 
˛ass
 
	gHomogøphy
;

13 
˛ass
 
	gM©chD©a
;

16 ˛as†
	cCylödîStôchî
 : 
public
 
StôchîBa£
 {

17 
¥Ÿe˘ed
:

18 
C⁄√˘edImages
 
bundÀ
;

21 
buûd_w¨p
();

24 
upd©e_h_Á˘‹
(, &, &,

25 
°d
::
ve˘‹
<
Homogøphy
>&,

26 c⁄° 
°d
::
ve˘‹
<
M©chD©a
>&);

28 
M©32f
 
≥r•e˘ive_c‹ª˘i⁄
(const Mat32f&);

30 
	gpublic
:

31 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gX
 =

32 
dißbÀ_if_ßme_‹_dîived
<
CylödîStôchî
, 
	gU
>>

33 
CylödîStôchî
(
U
&& 
i
Ë: 
StôchîBa£
(
°d
::
f‹w¨d
<U>(i)) {

34 
bundÀ
.
comp⁄ít
.
ªsize
(
imgs
.
size
());

35 
REP
(
i
, 
imgs
.
size
())

36 
	gbundÀ
.
	gcomp⁄ít
[
i
].
	gimg±r
 = &
imgs
[i];

39 
vútuÆ
 
M©32f
 
buûd
();

	@stitch/match_info.hh

3 #¥agm®
⁄˚


4 
	~<utûôy
>

5 
	~<ve˘‹
>

6 
	~<io°ªam
>

8 
	~"lib/geomëry.hh
"

9 
	~"homogøphy.hh
"

10 
	~"comm⁄/comm⁄.hh
"

12 
«me•a˚
 
	g∑no
 {

14 
	sM©chInfo
 {

16 
	g°d
::
	t∑ú
<
	tVec2D
, Vec2D> 
	tPCC
;

17 
	g°d
::
ve˘‹
<
PCC
> 
m©ch
;

18 
	gc⁄fidí˚
 = 0;

19 
Homogøphy
 
	ghomo
;

21 
ªvî£
() {

22 auto& 
	gc
 : 
m©ch
)

23 
°d
::
sw≠
(
c
.
fú°
, c.
£c⁄d
);

26 
£rülize
(
°d
::
o°ªam
& 
os
) const {

27 
os
 << 
c⁄fidí˚
 << " ";

28 
	ghomo
.
£rülize
(
os
);

29 
	gos
 << " " << 
	gm©ch
.
size
();

30 auto& 
	gp
 : 
m©ch
) {

31 
os
 << " " << 
p
.
fú°
.
x
 << " "

32 << 
p
.
fú°
.
y
 << " " <<Ö.
£c⁄d
.
x
 << " "

33 << 
p
.
£c⁄d
.
y
;

37 
M©chInfo
 
de£rülize
(
°d
::
i°ªam
& 
is
) {

38 
M©chInfo
 
ªt
;

39 
	gis
 >> 
	gªt
.
	gc⁄fidí˚
;

40 
	gªt
.
	ghomo
 = 
Homogøphy
::
de£rülize
(
is
);

41 
	gm©ch_size
;

42 
	gis
 >> 
	gm©ch_size
;

44 
	gªt
.
	gm©ch
.
ªsize
(
m©ch_size
);

45 
REP
(
i
, 
m©ch_size
) {

46 
	gPCC
& 
	gp
 = 
ªt
.
m©ch
[
i
];

47 
	gis
 >> 
	gp
.
	gfú°
.
	gx
 >>Ö.fú°.
	gy
 >>Ö.
	g£c⁄d
.x >>Ö.second.y;

49  
	gªt
;

53 
	sSh≠e2D
 {

54 
	gw
, 
	gh
;

55 
Sh≠e2D
(
w
, 
h
): w(w), h(h) {}

57 
ölöe
 
hÆfw
(Ëc⁄° {  
	gw
 * 0.5; }

58 
ölöe
 
hÆfh
(Ëc⁄° {  
	gh
 * 0.5; }

60 
ölöe
 
Vec2D
 
˚¡î
(Ëc⁄° {  
	gVec2D
{
hÆfw
(), 
hÆfh
()}; }

64 
ölöe
 
	g°d
::
ve˘‹
<
Vec2D
> 
shi·ed_c‹√r
() const {

65  {
Vec2D
{-
w
*0.5, -
	gh
*0.5}, 
	gVec2D
{
	gw
*0.5,-h*0.5},

66 
	gVec2D
{-
	gw
*0.5, 
	gh
*0.5}, Vec2D{w*0.5, h*0.5}};

70 
ölöe
 
boﬁ
 
shi·ed_ö
(
Vec2D
 
p
) const {

71  (
	gp
.
	gx
 >-
w
*0.5 && 
p
.
x
 < w*0.5 &&Ö.
y
 >-
h
*0.5 &&Ö.y < h*0.5);

74 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
os
, c⁄° 
	gSh≠e2D
& 
	gs
) {

75 
	gos
 << "w=" << 
	gs
.
	gw
 << ",h=" << s.
	gh
;

76  
	gos
;

	@stitch/stitcher.hh

5 #¥agm®
⁄˚


6 
	~<mem‹y
>

7 
	~<ve˘‹
>

8 
	~"lib/m©.h
"

9 
	~"lib/utûs.hh
"

10 
	~"°ôchî_image.hh
"

11 
	~"°ôchîba£.hh
"

12 
	~"m©ch_öfo.hh
"

13 
	~"comm⁄/comm⁄.hh
"

15 
«me•a˚
 
	g∑no
 {

18 
˛ass
 
	gPaúWi£M©chî
;

20 ˛as†
	cStôchî
 : 
public
 
StôchîBa£
 {

21 
¥iv©e
:

23 
C⁄√˘edImages
 
bundÀ
;

27 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
M©chInfo
>> 
∑úwi£_m©ches
;

30 
boﬁ
 
m©ch_image
(c⁄° 
PaúWi£M©chî
&, 
i
, 
j
);

33 
∑úwi£_m©ch
();

35 
löór_∑úwi£_m©ch
();

38 
assign_˚¡î
();

41 
e°im©e_ˇmîa
();

44 
buûd_löór_sim∂e
();

47 
døw_m©chöfo
();

48 
dump_m©chöfo
(const *) const;

49 
lﬂd_m©chöfo
(const *);

50 
	gpublic
:

51 
ãm∂©e
<
ty≥«me
 
U
,Åy≥«mê
	gX
 =

52 
dißbÀ_if_ßme_‹_dîived
<
Stôchî
, 
	gU
>>

53 
Stôchî
(
U
&& 
i
Ë: 
StôchîBa£
(
°d
::
f‹w¨d
<U>(i)) {

54 
bundÀ
.
comp⁄ít
.
ªsize
(
imgs
.
size
());

55 
REP
(
i
, 
imgs
.
size
())

56 
	gbundÀ
.
	gcomp⁄ít
[
i
].
	gimg±r
 = &
imgs
[i];

59 
vútuÆ
 
M©32f
 
buûd
();

	@stitch/transform_estimate.hh

5 #¥agm®
⁄˚


6 
	~<ve˘‹
>

7 
	~"lib/m©rix.hh
"

8 
	~"lib/geomëry.hh
"

9 
	~"m©ch_öfo.hh
"

10 
	~"comm⁄/comm⁄.hh
"

12 
«me•a˚
 
	g∑no
 {

13 
˛ass
 
	gM©chD©a
;

14 
˛ass
 
	gHomogøphy
;

15 
	gDes¸ùt‹
;

18 ˛as†
	cTønsf‹mE°im©i⁄
 {

19 
	gpublic
:

22 
Tønsf‹mE°im©i⁄
(c⁄° 
M©chD©a
& 
m_m©ch
,

23 c⁄° 
°d
::
ve˘‹
<
Vec2D
>& 
kp1
,

24 c⁄° 
°d
::
ve˘‹
<
Vec2D
>& 
kp2
,

25 c⁄° 
Sh≠e2D
& 
sh≠e1
, c⁄° Sh≠e2D& 
sh≠e2
);

27 
Tønsf‹mE°im©i⁄
(c⁄° Tønsf‹mE°im©i⁄&Ë
dñëe
;

28 
	gTønsf‹mE°im©i⁄
& 
	g›î©‹
 = (c⁄° 
Tønsf‹mE°im©i⁄
&Ë
dñëe
;

31 
boﬁ
 
gë_å™sf‹m
(
M©chInfo
* 
öfo
);

33 
	eTønsf‹mTy≥
 { 
	gAfföe
, 
	gHomo
 };

35 
	g¥iv©e
:

36 c⁄° 
M©chD©a
& 
m©ch
;

37 c⁄° 
	g°d
::
ve˘‹
<
Vec2D
> &
kp1
, &
	gkp2
;

38 c⁄° 
Sh≠e2D
 
	gsh≠e1
, 
	gsh≠e2
;

40 
	gønßc_ölõr_thªs
;

41 
Tønsf‹mTy≥
 
	gå™sf‹m_ty≥
;

44 
M©rix
 
	gf2_homo_co‹
;

47 
Homogøphy
 
ˇlc_å™sf‹m
(c⁄° 
°d
::
ve˘‹
<>&) const;

52 
boﬁ
 
fûl_ölõrs_to_m©chöfo
(

53 c⁄° 
°d
::
ve˘‹
<>&, 
M©chInfo
*) const;

56 
	g°d
::
ve˘‹
<> 
gë_ölõrs
(c⁄° 
Homogøphy
&) const;

	@stitch/warp.hh

5 #¥agm®
⁄˚


6 
	~"lib/geomëry.hh
"

7 
	~"lib/m©.h
"

8 
	~"„©uª/„©uª.hh
"

9 
	~"m©ch_öfo.hh
"

10 
	~"comm⁄/comm⁄.hh
"

12 
«me•a˚
 
	g∑no
 {

14 ˛as†
	cCylödîProje˘
 {

15 
	gpublic
:

16 
Vec
 
˚¡î
;

17 
	gr
;

18 
	gsizeÁ˘‹
;

20 
CylödîProje˘
(
m_r
, c⁄° 
Vec
& 
m_˚¡î
, 
m_size
):

21 
˚¡î
(
m_˚¡î
), 
r
(
m_r
),

22 
sizeÁ˘‹
(
m_size
){}

25 
M©32f
 
¥oje˘
(c⁄° M©32f& 
img
, 
°d
::
ve˘‹
<
Vec2D
>& 
±s
) const;

29 
Vec2D
 
¥oje˘
(
Sh≠e2D
& 
sh≠e
, 
°d
::
ve˘‹
<Vec2D>& 
±s
) const;

31 
	g¥iv©e
:

33 
Vec2D
 
¥oj
(c⁄° 
Vec
& 
p
) const;

35 
ölöe
 
Vec2D
 
¥oj
(c⁄° Vec2D& 
p
) const

36 {  
¥oj
(
Vec
(
p
.
x
,Ö.
y
, 0)); }

38 
Vec2D
 
¥oj_r
(c⁄° Vec2D& 
p
) const;

41 ˛as†
	cCylödîW¨≥r
 {

42 
	gpublic
:

43 
ex∂icô
 
CylödîW¨≥r
(
ªÆ_t
 
m_hÁ˘‹
):

44 
h_Á˘‹
(
m_hÁ˘‹
) {}

47 
w¨p
(
M©32f
& 
m©
, 
°d
::
ve˘‹
<
Vec2D
>& 
k±s
) const {

48 
m©
 = 
gë_¥oje˘‹
(

49 
m©
.
width
(), m©.
height
()).
¥oje˘
(m©, 
k±s
);

53 
w¨p
(
Sh≠e2D
& 
sh≠e
, 
°d
::
ve˘‹
<
Vec2D
>& 
k±s
) const {

54 
gë_¥oje˘‹
(
sh≠e
.
w
, sh≠e.
h
).
¥oje˘
(sh≠e, 
k±s
);

58 
ölöe
 
w¨p
(
M©32f
& 
m©
) const {

59 
	g°d
::
ve˘‹
<
Vec2D
> 
a
;

60 
w¨p
(
m©
, 
a
);

63 
	g¥Ÿe˘ed
:

64 
CylödîProje˘
 
gë_¥oje˘‹
(
w
, 
h
) const;

65 c⁄° 
ªÆ_t
 
	gh_Á˘‹
;

	@feature/feature.hh

5 #¥agm®
⁄˚


7 
	~"lib/c⁄fig.hh
"

8 
	~"lib/m©.h
"

9 
	~"lib/geomëry.hh
"

10 
	~"„©uª/di°.hh
"

11 
	~"comm⁄/comm⁄.hh
"

12 
	~<c°rög
>

14 
«me•a˚
 
	g∑no
 {

16 
	gBrõfP©ã∫
;

18 
	sDes¸ùt‹
 {

19 
Vec2D
 
	gco‹
;

20 
	g°d
::
ve˘‹
<> 
des¸ùt‹
;

23 
eu˛idón_sqr
(c⁄° 
Des¸ùt‹
& 
r
, 
now_thªs
) const {

24  
	g∑no
::
eu˛idón_sqr
(
des¸ùt‹
.
d©a
(), 
r
.des¸ùt‹.d©a(), ()des¸ùt‹.
size
(), 
now_thªs
);

27 
hammög
(c⁄° 
Des¸ùt‹
& 
r
) const {

28  
	g∑no
::
hammög
(
des¸ùt‹
.
d©a
(), 
r
.des¸ùt‹.d©a(), ()des¸ùt‹.
size
());

33 
	sSSPoöt
 {

34 
Co‹
 
	gco‹
;

35 
Vec2D
 
	gªÆ_co‹
;

36 
	gpyr_id
, 
	gsˇÀ_id
;

37 
	gdú
;

38 
	gsˇÀ_Á˘‹
;

42 ˛as†
	cFótuªDëe˘‹
 {

43 
	gpublic
:

44 
FótuªDëe˘‹
() = ;

45 
	gvútuÆ
 ~
FótuªDëe˘‹
() = ;

46 
FótuªDëe˘‹
(c⁄° FótuªDëe˘‹&Ë
dñëe
;

47 
	gFótuªDëe˘‹
& 
	g›î©‹
 = (c⁄° 
FótuªDëe˘‹
&Ë
dñëe
;

50 
	g°d
::
ve˘‹
<
Des¸ùt‹
> 
dëe˘_„©uª
(c⁄° 
M©32f
& 
img
) const;

51 
vútuÆ
 
	g°d
::
ve˘‹
<
Des¸ùt‹
> 
do_dëe˘_„©uª
(c⁄° 
M©32f
& 
img
) const = 0;

54 ˛as†
	cSIFTDëe˘‹
 : 
public
 
FótuªDëe˘‹
 {

55 
public
:

56 
°d
::
ve˘‹
<
Des¸ùt‹
> 
do_dëe˘_„©uª
(c⁄° 
M©32f
& 
img
Ëc⁄° 
ovîride
;

60 ˛as†
	cBRIEFDëe˘‹
 : 
public
 
FótuªDëe˘‹
 {

62 
public
:

63 
BRIEFDëe˘‹
();

64 
	gvútuÆ
 ~
BRIEFDëe˘‹
();

65 
	g°d
::
ve˘‹
<
Des¸ùt‹
> 
do_dëe˘_„©uª
(c⁄° 
M©32f
& 
img
Ëc⁄° 
ovîride
;

67 
	g¥Ÿe˘ed
:

68 
°d
::
unique_±r
<
BrõfP©ã∫
> 
∑âîn
;

	@lib/debugutils.hh

6 #¥agm®
⁄˚


7 
	~<°rög
>

8 
	~<ôî©‹
>

10 #ifde‡
_WIN32


11 
	#__©åibuã__
(
x
)

	)

14 
	#P
(
a
Ë
°d
::
cout
 << (aË<< std::
ídl


	)

15 
	#PP
(
a
Ë
°d
::
cout
 << #®<< ": " << (aË<< std::
ídl


	)

16 
	#PA
(
¨r
) \

18 
°d
::
cout
 << #arr << ": "; \

19 
°d
::
	`c›y
(
	`begö
(
¨r
), 
	`íd
◊º), std::
o°ªam_ôî©‹
<°d::
ªmove_ª„ªn˚
<
	`de˛ty≥
◊º)>::
ty≥
::
vÆue_ty≥
>(°d::
cout
, " ")); \

20 
°d
::
cout
 << std::
ídl
; \

21 } 0)

	)

23 
__m_as£π_check__
(
boﬁ
 
vÆ
, c⁄° *
ex¥
,

24 c⁄° *
fûe
, c⁄° *
func
, 
löe
);

27 
	$îr‹_exô
(c⁄° *
msg
Ë
	`__©åibuã__
((
n‹ëu∫
));

29 
ölöe
 
	$îr‹_exô
(c⁄° 
°d
::
°rög
& 
s
Ë
	`__©åibuã__
((
n‹ëu∫
));

30 
	$îr‹_exô
(c⁄° 
°d
::
°rög
& 
s
) {

31 
	`îr‹_exô
(
s
.
	`c_°r
());

32 
	}
}

36 
	#¥öt_debug
(
fmt
, ...)

	)

38 
	$__¥öt_debug__
(c⁄° *
fûe
, c⁄° *
func
, 
löe
, c⁄° *
fmt
, ...)

39 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 4, 5)));

41 #ifde‡
DEBUG


43 
	#m_as£π
(
ex¥
) \

44 
	`__m_as£π_check__
((
ex¥
), #ex¥, 
__FILE__
, 
__func__
 , 
__LINE__
)

	)

50 
	#m_as£π
(
ex¥
)

	)

	@lib/matrix.hh

5 #¥agm®
⁄˚


6 
	~<o°ªam
>

7 
	~"m©.h
"

9 
˛ass
 
	gM©rix
 : 
public
 
M©
<> {

10 
public
:

11 
M©rix
(){}

13 
M©rix
(
rows
, 
cﬁs
):

14 
M©
<>(
rows
, 
	gcﬁs
, 1) {}

16 
M©rix
(c⁄° 
M©
<>& 
r
):

17 
M©
<>(
r
) {}

19 
boﬁ
 
övî£
(
M©rix
 & 
ªt
) const;

21 
M©rix
 
p£udo_övî£
() const;

23 
M©rix
 
å™•o£
() const;

25 
M©rix
 
¥od
(c⁄° M©rix & 
r
) const;

27 
M©rix
 
ñem_¥od
(c⁄° M©rix& 
r
) const;

29 
M©rix
 
	g›î©‹
 * (c⁄° 
	gM©rix
& 
	gr
) const

30 {  
¥od
(
r
); }

32 
mu…
(
m
) {

33 
	gn
 = 
pixñs
();

34 * 
	gp
 = 
±r
();

35 
	gi
 = 0; i < 
	gn
; i ++)

36 *
	gp
 *
m
,Ö++;

39 
M©rix
 
	g›î©‹
 - (c⁄° 
	gM©rix
& 
	gr
) const;

40 
M©rix
 
	g›î©‹
 + (c⁄° 
	gM©rix
& 
	gr
) const;

42 
boﬁ
 
SVD
(
M©rix
 & 
u
, M©rix & 
s
, M©rix & 
v
) const;

44 
n‹mrŸ
();

46 
sqrsum
() const;

48 
M©rix
 
cﬁ
(
i
) const;

50 
zîo
();

52 
M©rix
 
I
();

54 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
os
, c⁄° 
	gM©rix
 & 
	gm
);

	@lib/utils.hh

6 #¥agm®
⁄˚


8 
	~<c°d¨g
>

9 
	~<c°dlib
>

10 
	~<°rög
>

11 
	~<c°rög
>

12 
	~<s°ªam
>

13 
	~<mem‹y
>

14 
	~<sys/°©.h
>

15 
	~<ty≥_åaôs
>

17 #ifde‡
_WIN32


18 
	#__©åibuã__
(
x
)

	)

21 
	tªÆ_t
;

22 c⁄° 
ªÆ_t
 
	gEPS
 = 1e-6;

23 c⁄° 
ªÆ_t
 
	gGEO_EPS_SQR
 = 1e-14;

24 c⁄° 
ªÆ_t
 
	gGEO_EPS
 = 1e-7;

25 
ölöe
 
	$sqr
(
x
Ë{  x * x; 
	}
}

27 
	#bëwìn
(
a
, 
b
, 
c
Ë(◊ >bË&& (®<¯- 1))

	)

28 
	#REP
(
x
, 
y
Ë
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_ª„ªn˚
<
	`de˛ty≥
(y)>::
ty≥
>::ty≥ x = 0; x < (y); x ++)

	)

29 
	#REPL
(
x
, 
y
, 
z
Ë
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_ª„ªn˚
<
	`de˛ty≥
(y)>::
ty≥
>::ty≥ x = y; x < (z); x ++)

	)

30 
	#REPD
(
x
, 
y
, 
z
Ë
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_ª„ªn˚
<
	`de˛ty≥
(y)>::
ty≥
>::ty≥ x = y; x >(z); x --)

	)

32 
	g°d
::
°rög
 
TERM_COLOR
(
k
);

34 
	#COLOR_RED
 "\x1b[31m"

	)

35 
	#COLOR_GREEN
 "\x1b[32m"

	)

36 
	#COLOR_YELLOW
 "\x1b[33m"

	)

37 
	#COLOR_BLUE
 "\x1b[34m"

	)

38 
	#COLOR_MAGENTA
 "\x1b[35m"

	)

39 
	#COLOR_CYAN
 "\x1b[36m"

	)

40 
	#COLOR_RESET
 "\x1b[0m"

	)

42 
c_¥ötf
(c⁄° * 
cﬁ
, c⁄° * 
fmt
, ...);

44 
c_Ârötf
(c⁄° * 
cﬁ
, 
FILE
* 
Â
, c⁄° * 
fmt
, ...);

46 
__©åibuã__
 (–
	$f‹m©
–
¥ötf
, 1, 2 ) ))

47 
°d
::
°rög
 
	`s•rötf
(c⁄° *
fmt
, ...);

49 
ãm∂©e
<
ty≥«me
 
T
>

50 
ölöe
 
boﬁ
 
	$upd©e_mö
(
T
 &
de°
, c⁄° T &
vÆ
) {

51 i‡(
vÆ
 < 
de°
) {

52 
de°
 = 
vÆ
;  
åue
;

54  
Ál£
;

55 
	}
}

57 
	gãm∂©e
<
ty≥«me
 
	gT
>

58 
ölöe
 
boﬁ
 
	$upd©e_max
(
T
 &
de°
, c⁄° T &
vÆ
) {

59 i‡(
de°
 < 
vÆ
) {

60 
de°
 = 
vÆ
;  
åue
;

62  
Ál£
;

63 
	}
}

65 
	gãm∂©e
 <
ty≥«me
 
	gT
>

66 
ölöe
 
	$‰ì_2d
(
T
** 
±r
, 
w
) {

67 i‡(
±r
 !
nuŒ±r
)

68 
i
 = 0; i < 
w
; i ++)

69 
dñëe
[] 
±r
[
i
];

70 
dñëe
[] 
±r
;

71 
	}
}

73 
	gãm∂©e
 <
ty≥«me
 
	gT
>

74 
	g°d
::
sh¨ed_±r
<
T
> 
	$¸óã_auto_buf
(
size_t
 
Àn
, 
boﬁ
 
öô_zîo
 = 
Ál£
) {

75 
°d
::
sh¨ed_±r
<
T
> 
	`ªt
(
√w
 T[
Àn
], std::
deÁu…_dñëe
<T[]>());

76 i‡(
öô_zîo
)

77 
	`mem£t
(
ªt
.
	`gë
(), 0, (
T
Ë* 
Àn
);

78  
ªt
;

79 
	}
}

82 
ölöe
 
boﬁ
 
	$exi°s_fûe
(c⁄° * 
«me
) {

83 
°©
 
buf„r
;

84  
	`°©
(
«me
, &
buf„r
) == 0;

85 
	}
}

87 
ölöe
 
boﬁ
 
	$ídswôh
(c⁄° * 
°r
, c⁄° * 
suffix
) {

88 i‡(!
°r
 || !
suffix
Ë 
Ál£
;

89 autÿ
l1
 = 
	`°æí
(
°r
), 
l2
 = såÀn(
suffix
);

90 i‡(
l2
 > 
l1
Ë 
Ál£
;

91  
	`°∫cmp
(
°r
 + 
l1
 - 
l2
, 
suffix
,Ü2) == 0;

92 
	}
}

	@feature/dist.hh

5 #¥agm®
⁄˚


6 
	~<limôs
>

7 
	~"lib/debugutûs.hh
"

9 
«me•a˚
 
	g∑no
 {

11 
eu˛idón_sqr
(

12 c⁄° * 
x
, c⁄° * 
y
,

13 
size_t
 
n
, 
now_thªs
);

15 
hammög
(c⁄° * 
x
, c⁄° * 
y
, 
n
);

19 
	sL2SSE
 {

20 
boﬁ
 
	tis_kdåì_di°™˚
;

21 
	tEÀmítTy≥
;

22 
	tResu…Ty≥
;

24 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹1
,Åy≥«mê
	gIãøt‹2
>

25 
ölöe
 
›î©‹
()(

26 
Iãøt‹1
 
	ga
, 
Iãøt‹2
 
	gb
,

27 
size_t
 
	gsize
, 
Resu…Ty≥
 
	gw‹°_di°
 = -1) const {

28 i‡(
w‹°_di°
 <0Ëw‹°_di° = 
°d
::
numîic_limôs
<>::
max
();

29  
	g∑no
::
eu˛idón_sqr
(
a
, 
b
, 
size
, 
w‹°_di°
);

32 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
>

33 
ölöe
 
Resu…Ty≥
 
accum_di°
(c⁄° 
U
& 
a
, c⁄° 
V
& 
b
, ) const {

34  (
	ga
-
	gb
)*(a-b);

	@
1
.
1
/usr/include
22
374
main.cc
common/common.hh
feature/extrema.hh
feature/matcher.hh
feature/orientation.hh
lib/config.hh
lib/geometry.hh
lib/imgproc.hh
lib/mat.h
lib/planedrawer.hh
lib/polygon.hh
lib/timer.hh
stitch/cylstitcher.hh
stitch/match_info.hh
stitch/stitcher.hh
stitch/transform_estimate.hh
stitch/warp.hh
feature/feature.hh
lib/debugutils.hh
lib/matrix.hh
lib/utils.hh
feature/dist.hh
